
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DingSDK
{
    using DingSDK.Models.Components;
    using DingSDK.Utils;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Ding: The OTP API allows you to send authentication codes to your users using their phone numbers
    /// </summary>
    public interface IDing
    {

        /// <summary>
        /// Send OTP codes to your users using their phone numbers.
        /// </summary>
        public IOtp Otp { get; }

        /// <summary>
        /// Retrieve up-to-date metadata about a specific phone number
        /// </summary>
        public ILookup Lookup { get; }
    }
    
    public class SDKConfig
    {
    }

    /// <summary>
    /// Ding: The OTP API allows you to send authentication codes to your users using their phone numbers
    /// </summary>
    public class Ding: IDing
    {
        public SDKConfig Config { get; private set; }
        public static Dictionary<string, string> ServerList = new Dictionary<string, string>()
        {
            {"Serverproduction", "https://api.ding.live/v1" },
        };

        private const string _language = "csharp";
        private const string _sdkVersion = "0.2.2";
        private const string _sdkGenVersion = "2.187.2";
        private const string _openapiDocVersion = "1.0.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.2.2 2.187.2 1.0.0 DingSDK";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;
        public IOtp Otp { get; private set; }
        public ILookup Lookup { get; private set; }

        public Ding(Security? security = null, string? serverUrl = null, ISpeakeasyHttpClient? client = null)
        {
            _serverUrl = serverUrl ?? Ding.ServerList["Serverproduction"];

            _defaultClient = new SpeakeasyHttpClient(client);
            _securityClient = _defaultClient;
            
            if(security != null)
            {
                _securityClient = SecuritySerializer.Apply(_defaultClient, security);
            }
            
            Config = new SDKConfig()
            {
            };

            Otp = new Otp(_defaultClient, _securityClient, _serverUrl, Config);
            Lookup = new Lookup(_defaultClient, _securityClient, _serverUrl, Config);
        }
    }
}