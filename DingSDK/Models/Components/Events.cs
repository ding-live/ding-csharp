//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DingSDK.Models.Components
{
    using DingSDK.Models.Components;
    using DingSDK.Utils;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class EventsType
    {
        private EventsType(string value) { Value = value; }

        public string Value { get; private set; }
        public static EventsType Attempt { get { return new EventsType("Attempt"); } }
        
        public static EventsType Check { get { return new EventsType("Check"); } }
        
        public static EventsType DeliveryStatus { get { return new EventsType("Delivery Status"); } }
        
        public static EventsType BalanceUpdate { get { return new EventsType("Balance Update"); } }
        
        public static EventsType Null { get { return new EventsType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(EventsType v) { return v.Value; }
        public static EventsType FromString(string v) {
            switch(v) {
                case "Attempt": return Attempt;
                case "Check": return Check;
                case "Delivery Status": return DeliveryStatus;
                case "Balance Update": return BalanceUpdate;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for EventsType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((EventsType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Events.EventsConverter))]
    public class Events {
        public Events(EventsType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Attempt? Attempt { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Check? Check { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public DeliveryStatus? DeliveryStatus { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public BalanceUpdate? BalanceUpdate { get; set; }

        public EventsType Type { get; set; }


        public static Events CreateAttempt(Attempt attempt) {
            EventsType typ = EventsType.Attempt;

            Events res = new Events(typ);
            res.Attempt = attempt;
            return res;
        }

        public static Events CreateCheck(Check check) {
            EventsType typ = EventsType.Check;

            Events res = new Events(typ);
            res.Check = check;
            return res;
        }

        public static Events CreateDeliveryStatus(DeliveryStatus deliveryStatus) {
            EventsType typ = EventsType.DeliveryStatus;

            Events res = new Events(typ);
            res.DeliveryStatus = deliveryStatus;
            return res;
        }

        public static Events CreateBalanceUpdate(BalanceUpdate balanceUpdate) {
            EventsType typ = EventsType.BalanceUpdate;

            Events res = new Events(typ);
            res.BalanceUpdate = balanceUpdate;
            return res;
        }

        public static Events CreateNull() {
            EventsType typ = EventsType.Null;
            return new Events(typ);
        }

        public class EventsConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Events);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Events(EventsType.BalanceUpdate)
                    {
                        BalanceUpdate = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<BalanceUpdate>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(BalanceUpdate), new Events(EventsType.BalanceUpdate), "BalanceUpdate"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Events(EventsType.Check)
                    {
                        Check = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Check>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Check), new Events(EventsType.Check), "Check"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Events(EventsType.DeliveryStatus)
                    {
                        DeliveryStatus = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<DeliveryStatus>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(DeliveryStatus), new Events(EventsType.DeliveryStatus), "DeliveryStatus"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Events(EventsType.Attempt)
                    {
                        Attempt = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Attempt>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Attempt), new Events(EventsType.Attempt), "Attempt"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Events res = (Events)value;
                if (EventsType.FromString(res.Type).Equals(EventsType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Attempt != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Attempt));
                    return;
                }
                if (res.Check != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Check));
                    return;
                }
                if (res.DeliveryStatus != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DeliveryStatus));
                    return;
                }
                if (res.BalanceUpdate != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.BalanceUpdate));
                    return;
                }

            }

        }

    }
}