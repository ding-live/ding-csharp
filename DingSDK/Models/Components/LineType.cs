//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DingSDK.Models.Components
{
    using DingSDK.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The type of phone line.<br/>
    /// 
    /// <remarks>
    ///   * `CallingCards` - Numbers that are associated with providers of pre-paid domestic and international calling cards.<br/>
    ///   * `FixedLine` - Landline phone numbers.<br/>
    ///   * `InternetServiceProvider` - Numbers reserved for ISPs.<br/>
    ///   * `LocalRate` - Numbers that can be assigned non-geographically.<br/>
    ///   * `Mobile` - Mobile phone numbers.<br/>
    ///   * `Other` - Other types of services.<br/>
    ///   * `Pager` - Number ranges specifically allocated to paging devices.<br/>
    ///   * `PayPhone` - Allocated numbers for payphone kiosks in some countries.<br/>
    ///   * `PremiumRate` - Landline numbers where the calling party pays more than standard.<br/>
    ///   * `Satellite` - Satellite phone numbers.<br/>
    ///   * `Service` - Automated applications.<br/>
    ///   * `SharedCost` - Specific landline ranges where the cost of making the call is shared between the calling and called party.<br/>
    ///   * `ShortCodesCommercial` - Short codes are memorable, easy-to-use numbers, like the UK&apos;s NHS 111, often sold to businesses. Not available in all countries.<br/>
    ///   * `TollFree` - Number where the called party pays for the cost of the call not the calling party.<br/>
    ///   * `UniversalAccess` - Number ranges reserved for Universal Access initiatives.<br/>
    ///   * `Unknown` - Unknown phone number type.<br/>
    ///   * `VPN` - Numbers are used exclusively within a private telecommunications network, connecting the operator&apos;s terminals internally and not accessible via the public telephone network.<br/>
    ///   * `VoiceMail` - A specific category of Interactive Voice Response (IVR) services.<br/>
    ///   * `Voip` - Specific ranges for providers of VoIP services to allow incoming calls from the regular telephony network.<br/>
    /// 
    /// </remarks>
    /// </summary>
    public enum LineType
    {
        [JsonProperty("CallingCards")]
        CallingCards,
        [JsonProperty("FixedLine")]
        FixedLine,
        [JsonProperty("InternetServiceProvider")]
        InternetServiceProvider,
        [JsonProperty("LocalRate")]
        LocalRate,
        [JsonProperty("Mobile")]
        Mobile,
        [JsonProperty("Other")]
        Other,
        [JsonProperty("Pager")]
        Pager,
        [JsonProperty("PayPhone")]
        PayPhone,
        [JsonProperty("PremiumRate")]
        PremiumRate,
        [JsonProperty("Satellite")]
        Satellite,
        [JsonProperty("Service")]
        Service,
        [JsonProperty("SharedCost")]
        SharedCost,
        [JsonProperty("ShortCodesCommercial")]
        ShortCodesCommercial,
        [JsonProperty("TollFree")]
        TollFree,
        [JsonProperty("UniversalAccess")]
        UniversalAccess,
        [JsonProperty("Unknown")]
        Unknown,
        [JsonProperty("VPN")]
        Vpn,
        [JsonProperty("VoiceMail")]
        VoiceMail,
        [JsonProperty("Voip")]
        Voip,
    }

    public static class LineTypeExtension
    {
        public static string Value(this LineType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static LineType ToEnum(this string value)
        {
            foreach(var field in typeof(LineType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is LineType)
                    {
                        return (LineType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum LineType");
        }
    }

}