
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace DingSDK.Models.Components
{
    using DingSDK.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The type of phone line.
    /// </summary>
    public enum LineType
    {
        [JsonProperty("FixedLine")]
        FixedLine,
        [JsonProperty("Mobile")]
        Mobile,
        [JsonProperty("TollFree")]
        TollFree,
        [JsonProperty("PremiumRate")]
        PremiumRate,
        [JsonProperty("SharedCost")]
        SharedCost,
        [JsonProperty("Voip")]
        Voip,
        [JsonProperty("Pager")]
        Pager,
        [JsonProperty("VoiceMail")]
        VoiceMail,
        [JsonProperty("UniversalAccess")]
        UniversalAccess,
        [JsonProperty("Service")]
        Service,
        [JsonProperty("Unknown")]
        Unknown,
    }

    public static class LineTypeExtension
    {
        public static string Value(this LineType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static LineType ToEnum(this string value)
        {
            foreach(var field in typeof(LineType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is LineType)
                    {
                        return (LineType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum LineType");
        }
    }

}